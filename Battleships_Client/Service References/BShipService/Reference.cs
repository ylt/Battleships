//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.36282
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Battleships_Client.BShipService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessage", Namespace="http://schemas.datacontract.org/2004/07/BattleShips.imp")]
    [System.SerializableAttribute()]
    public partial class ChatMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int sequenceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int sequenceId {
            get {
                return this.sequenceIdField;
            }
            set {
                if ((this.sequenceIdField.Equals(value) != true)) {
                    this.sequenceIdField = value;
                    this.RaisePropertyChanged("sequenceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string user {
            get {
                return this.userField;
            }
            set {
                if ((object.ReferenceEquals(this.userField, value) != true)) {
                    this.userField = value;
                    this.RaisePropertyChanged("user");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShipInstance", Namespace="http://schemas.datacontract.org/2004/07/BattleShips.imp")]
    [System.SerializableAttribute()]
    public partial class ShipInstance : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Battleships_Client.BShipService.Position posField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Battleships_Client.BShipService.Rotation rotationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int shipIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool sunkenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Battleships_Client.BShipService.Position pos {
            get {
                return this.posField;
            }
            set {
                if ((object.ReferenceEquals(this.posField, value) != true)) {
                    this.posField = value;
                    this.RaisePropertyChanged("pos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Battleships_Client.BShipService.Rotation rotation {
            get {
                return this.rotationField;
            }
            set {
                if ((this.rotationField.Equals(value) != true)) {
                    this.rotationField = value;
                    this.RaisePropertyChanged("rotation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int shipId {
            get {
                return this.shipIdField;
            }
            set {
                if ((this.shipIdField.Equals(value) != true)) {
                    this.shipIdField = value;
                    this.RaisePropertyChanged("shipId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool sunken {
            get {
                return this.sunkenField;
            }
            set {
                if ((this.sunkenField.Equals(value) != true)) {
                    this.sunkenField = value;
                    this.RaisePropertyChanged("sunken");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Position", Namespace="http://schemas.datacontract.org/2004/07/BattleShips.imp")]
    [System.SerializableAttribute()]
    public partial class Position : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int xField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int yField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int x {
            get {
                return this.xField;
            }
            set {
                if ((this.xField.Equals(value) != true)) {
                    this.xField = value;
                    this.RaisePropertyChanged("x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int y {
            get {
                return this.yField;
            }
            set {
                if ((this.yField.Equals(value) != true)) {
                    this.yField = value;
                    this.RaisePropertyChanged("y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rotation", Namespace="http://schemas.datacontract.org/2004/07/BattleShips.imp")]
    public enum Rotation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RIGHT = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DOWN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LEFT = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UP = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShotType", Namespace="http://schemas.datacontract.org/2004/07/BattleShips.imp")]
    public enum ShotType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNFIRED = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MISS = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HIT = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ship", Namespace="http://schemas.datacontract.org/2004/07/BattleShips.imp")]
    [System.SerializableAttribute()]
    public partial class Ship : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int lengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int length {
            get {
                return this.lengthField;
            }
            set {
                if ((this.lengthField.Equals(value) != true)) {
                    this.lengthField = value;
                    this.RaisePropertyChanged("length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BShipService.IShipsService")]
    public interface IShipsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/NewPlayer", ReplyAction="http://tempuri.org/IShipsService/NewPlayerResponse")]
        int NewPlayer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/NewPlayer", ReplyAction="http://tempuri.org/IShipsService/NewPlayerResponse")]
        System.Threading.Tasks.Task<int> NewPlayerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/SetName", ReplyAction="http://tempuri.org/IShipsService/SetNameResponse")]
        void SetName(int playerId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/SetName", ReplyAction="http://tempuri.org/IShipsService/SetNameResponse")]
        System.Threading.Tasks.Task SetNameAsync(int playerId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/RetrieveMessages", ReplyAction="http://tempuri.org/IShipsService/RetrieveMessagesResponse")]
        Battleships_Client.BShipService.ChatMessage[] RetrieveMessages(int sequenceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/RetrieveMessages", ReplyAction="http://tempuri.org/IShipsService/RetrieveMessagesResponse")]
        System.Threading.Tasks.Task<Battleships_Client.BShipService.ChatMessage[]> RetrieveMessagesAsync(int sequenceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/SendMessage", ReplyAction="http://tempuri.org/IShipsService/SendMessageResponse")]
        void SendMessage(Battleships_Client.BShipService.ChatMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/SendMessage", ReplyAction="http://tempuri.org/IShipsService/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(Battleships_Client.BShipService.ChatMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/AddShip", ReplyAction="http://tempuri.org/IShipsService/AddShipResponse")]
        bool AddShip(int playerId, Battleships_Client.BShipService.ShipInstance ship);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/AddShip", ReplyAction="http://tempuri.org/IShipsService/AddShipResponse")]
        System.Threading.Tasks.Task<bool> AddShipAsync(int playerId, Battleships_Client.BShipService.ShipInstance ship);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/Fire", ReplyAction="http://tempuri.org/IShipsService/FireResponse")]
        Battleships_Client.BShipService.ShotType Fire(int playerId, Battleships_Client.BShipService.Position pos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/Fire", ReplyAction="http://tempuri.org/IShipsService/FireResponse")]
        System.Threading.Tasks.Task<Battleships_Client.BShipService.ShotType> FireAsync(int playerId, Battleships_Client.BShipService.Position pos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/GetBoard", ReplyAction="http://tempuri.org/IShipsService/GetBoardResponse")]
        Battleships_Client.BShipService.ShotType[] GetBoard(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/GetBoard", ReplyAction="http://tempuri.org/IShipsService/GetBoardResponse")]
        System.Threading.Tasks.Task<Battleships_Client.BShipService.ShotType[]> GetBoardAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/GetShips", ReplyAction="http://tempuri.org/IShipsService/GetShipsResponse")]
        Battleships_Client.BShipService.Ship[] GetShips();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShipsService/GetShips", ReplyAction="http://tempuri.org/IShipsService/GetShipsResponse")]
        System.Threading.Tasks.Task<Battleships_Client.BShipService.Ship[]> GetShipsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShipsServiceChannel : Battleships_Client.BShipService.IShipsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShipsServiceClient : System.ServiceModel.ClientBase<Battleships_Client.BShipService.IShipsService>, Battleships_Client.BShipService.IShipsService {
        
        public ShipsServiceClient() {
        }
        
        public ShipsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ShipsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShipsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShipsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int NewPlayer() {
            return base.Channel.NewPlayer();
        }
        
        public System.Threading.Tasks.Task<int> NewPlayerAsync() {
            return base.Channel.NewPlayerAsync();
        }
        
        public void SetName(int playerId, string name) {
            base.Channel.SetName(playerId, name);
        }
        
        public System.Threading.Tasks.Task SetNameAsync(int playerId, string name) {
            return base.Channel.SetNameAsync(playerId, name);
        }
        
        public Battleships_Client.BShipService.ChatMessage[] RetrieveMessages(int sequenceId) {
            return base.Channel.RetrieveMessages(sequenceId);
        }
        
        public System.Threading.Tasks.Task<Battleships_Client.BShipService.ChatMessage[]> RetrieveMessagesAsync(int sequenceId) {
            return base.Channel.RetrieveMessagesAsync(sequenceId);
        }
        
        public void SendMessage(Battleships_Client.BShipService.ChatMessage message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(Battleships_Client.BShipService.ChatMessage message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public bool AddShip(int playerId, Battleships_Client.BShipService.ShipInstance ship) {
            return base.Channel.AddShip(playerId, ship);
        }
        
        public System.Threading.Tasks.Task<bool> AddShipAsync(int playerId, Battleships_Client.BShipService.ShipInstance ship) {
            return base.Channel.AddShipAsync(playerId, ship);
        }
        
        public Battleships_Client.BShipService.ShotType Fire(int playerId, Battleships_Client.BShipService.Position pos) {
            return base.Channel.Fire(playerId, pos);
        }
        
        public System.Threading.Tasks.Task<Battleships_Client.BShipService.ShotType> FireAsync(int playerId, Battleships_Client.BShipService.Position pos) {
            return base.Channel.FireAsync(playerId, pos);
        }
        
        public Battleships_Client.BShipService.ShotType[] GetBoard(int playerId) {
            return base.Channel.GetBoard(playerId);
        }
        
        public System.Threading.Tasks.Task<Battleships_Client.BShipService.ShotType[]> GetBoardAsync(int playerId) {
            return base.Channel.GetBoardAsync(playerId);
        }
        
        public Battleships_Client.BShipService.Ship[] GetShips() {
            return base.Channel.GetShips();
        }
        
        public System.Threading.Tasks.Task<Battleships_Client.BShipService.Ship[]> GetShipsAsync() {
            return base.Channel.GetShipsAsync();
        }
    }
}
